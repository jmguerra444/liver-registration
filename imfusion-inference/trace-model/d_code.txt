def forward(input,
    slot0: Tensor,
    slot1: Tensor,
    slot2: Tensor,
    slot3: Tensor,
    slot4: Tensor,
    slot5: Tensor,
    slot6: Tensor,
    slot7: Tensor,
    slot8: Tensor,
    slot9: Tensor,
    slot10: Tensor,
    slot11: Tensor,
    slot12: Tensor,
    slot13: Tensor,
    slot14: Tensor,
    slot15: Tensor,
    slot16: Tensor,
    slot17: Tensor,
    slot18: Tensor,
    slot19: Tensor,
    slot20: Tensor,
    slot21: Tensor,
    slot22: Tensor,
    slot23: Tensor,
    slot24: Tensor,
    slot25: Tensor,
    slot26: Tensor,
    slot27: Tensor,
    slot28: Tensor,
    slot29: Tensor,
    slot30: Tensor,
    slot31: Tensor,
    slot32: Tensor,
    slot33: Tensor,
    slot34: Tensor,
    slot35: Tensor,
    slot36: Tensor,
    slot37: Tensor,
    slot38: Tensor,
    slot39: Tensor,
    slot40: Tensor,
    slot41: Tensor,
    slot42: Tensor,
    slot43: Tensor,
    slot44: Tensor,
    slot45: Tensor,
    slot46: Tensor,
    slot47: Tensor,
    slot48: Tensor,
    slot49: Tensor,
    slot50: Tensor,
    slot51: Tensor,
    slot52: Tensor,
    slot53: Tensor,
    slot54: Tensor,
    slot55: Tensor,
    slot56: Tensor,
    slot57: Tensor,
    slot58: Tensor,
    slot59: Tensor,
    slot60: Tensor,
    slot61: Tensor,
    slot62: Tensor,
    slot63: Tensor,
    slot64: Tensor,
    slot65: Tensor,
    slot66: Tensor,
    slot67: Tensor,
    slot68: Tensor,
    slot69: Tensor,
    slot70: Tensor,
    slot71: Tensor,
    slot72: Tensor,
    slot73: Tensor,
    slot74: Tensor,
    slot75: Tensor,
    slot76: Tensor,
    slot77: Tensor,
    slot78: Tensor,
    slot79: Tensor,
    slot80: Tensor,
    slot81: Tensor,
    slot82: Tensor,
    slot83: Tensor,
    slot84: Tensor,
    slot85: Tensor,
    slot86: Tensor,
    slot87: Tensor,
    slot88: Tensor,
    slot89: Tensor,
    slot90: Tensor,
    slot91: Tensor,
    slot92: Tensor,
    slot93: Tensor,
    slot94: Tensor,
    slot95: Tensor,
    slot96: Tensor,
    slot97: Tensor,
    slot98: Tensor,
    slot99: Tensor,
    slot100: Tensor,
    slot101: Tensor,
    slot102: Tensor,
    slot103: Tensor,
    slot104: Tensor,
    slot105: Tensor,
    slot106: Tensor,
    slot107: Tensor,
    slot108: Tensor,
    slot109: Tensor,
    slot110: Tensor,
    slot111: Tensor,
    slot112: Tensor,
    slot113: Tensor,
    slot114: Tensor,
    slot115: Tensor,
    slot116: Tensor,
    slot117: Tensor) -> Tensor:
  input0 = torch._convolution(input, slot117, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _0 = torch.add_(slot112, CONSTANTS.c0, alpha=1)
  size_prods = ops.prim.NumToTensor(torch.size(input0, 0))
  _1 = ops.prim.NumToTensor(torch.size(input0, 2))
  _2 = ops.prim.NumToTensor(torch.size(input0, 3))
  size_prods0 = torch.mul_(size_prods, _1)
  size_prods1 = torch.mul_(size_prods0, _2)
  input1 = torch.batch_norm(input0, slot116, slot115, slot114, slot113, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input2 = torch.relu_(input1)
  input3 = torch._convolution(input2, slot111, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _3 = torch.add_(slot106, CONSTANTS.c0, alpha=1)
  size_prods2 = ops.prim.NumToTensor(torch.size(input3, 0))
  _4 = ops.prim.NumToTensor(torch.size(input3, 2))
  _5 = ops.prim.NumToTensor(torch.size(input3, 3))
  size_prods3 = torch.mul_(size_prods2, _4)
  size_prods4 = torch.mul_(size_prods3, _5)
  input4 = torch.batch_norm(input3, slot110, slot109, slot108, slot107, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input5 = torch.relu_(input4)
  input6 = torch.max_pool2d(input5, [2, 2], [2, 2], [0, 0], [1, 1], False)
  input7 = torch._convolution(input6, slot105, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _6 = torch.add_(slot100, CONSTANTS.c0, alpha=1)
  size_prods5 = ops.prim.NumToTensor(torch.size(input7, 0))
  _7 = ops.prim.NumToTensor(torch.size(input7, 2))
  _8 = ops.prim.NumToTensor(torch.size(input7, 3))
  size_prods6 = torch.mul_(size_prods5, _7)
  size_prods7 = torch.mul_(size_prods6, _8)
  input8 = torch.batch_norm(input7, slot104, slot103, slot102, slot101, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input9 = torch.relu_(input8)
  input10 = torch._convolution(input9, slot99, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _9 = torch.add_(slot94, CONSTANTS.c0, alpha=1)
  size_prods8 = ops.prim.NumToTensor(torch.size(input10, 0))
  _10 = ops.prim.NumToTensor(torch.size(input10, 2))
  _11 = ops.prim.NumToTensor(torch.size(input10, 3))
  size_prods9 = torch.mul_(size_prods8, _10)
  size_prods10 = torch.mul_(size_prods9, _11)
  input11 = torch.batch_norm(input10, slot98, slot97, slot96, slot95, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input12 = torch.relu_(input11)
  input13 = torch.max_pool2d(input12, [2, 2], [2, 2], [0, 0], [1, 1], False)
  input14 = torch._convolution(input13, slot93, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _12 = torch.add_(slot88, CONSTANTS.c0, alpha=1)
  size_prods11 = ops.prim.NumToTensor(torch.size(input14, 0))
  _13 = ops.prim.NumToTensor(torch.size(input14, 2))
  _14 = ops.prim.NumToTensor(torch.size(input14, 3))
  size_prods12 = torch.mul_(size_prods11, _13)
  size_prods13 = torch.mul_(size_prods12, _14)
  input15 = torch.batch_norm(input14, slot92, slot91, slot90, slot89, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input16 = torch.relu_(input15)
  input17 = torch._convolution(input16, slot87, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _15 = torch.add_(slot82, CONSTANTS.c0, alpha=1)
  size_prods14 = ops.prim.NumToTensor(torch.size(input17, 0))
  _16 = ops.prim.NumToTensor(torch.size(input17, 2))
  _17 = ops.prim.NumToTensor(torch.size(input17, 3))
  size_prods15 = torch.mul_(size_prods14, _16)
  size_prods16 = torch.mul_(size_prods15, _17)
  input18 = torch.batch_norm(input17, slot86, slot85, slot84, slot83, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input19 = torch.relu_(input18)
  input20 = torch.max_pool2d(input19, [2, 2], [2, 2], [0, 0], [1, 1], False)
  input21 = torch._convolution(input20, slot81, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _18 = torch.add_(slot76, CONSTANTS.c0, alpha=1)
  size_prods17 = ops.prim.NumToTensor(torch.size(input21, 0))
  _19 = ops.prim.NumToTensor(torch.size(input21, 2))
  _20 = ops.prim.NumToTensor(torch.size(input21, 3))
  size_prods18 = torch.mul_(size_prods17, _19)
  size_prods19 = torch.mul_(size_prods18, _20)
  input22 = torch.batch_norm(input21, slot80, slot79, slot78, slot77, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input23 = torch.relu_(input22)
  input24 = torch._convolution(input23, slot75, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _21 = torch.add_(slot70, CONSTANTS.c0, alpha=1)
  size_prods20 = ops.prim.NumToTensor(torch.size(input24, 0))
  _22 = ops.prim.NumToTensor(torch.size(input24, 2))
  _23 = ops.prim.NumToTensor(torch.size(input24, 3))
  size_prods21 = torch.mul_(size_prods20, _22)
  size_prods22 = torch.mul_(size_prods21, _23)
  input25 = torch.batch_norm(input24, slot74, slot73, slot72, slot71, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input26 = torch.relu_(input25)
  input27 = torch.max_pool2d(input26, [2, 2], [2, 2], [0, 0], [1, 1], False)
  input28 = torch._convolution(input27, slot69, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _24 = torch.add_(slot64, CONSTANTS.c0, alpha=1)
  size_prods23 = ops.prim.NumToTensor(torch.size(input28, 0))
  _25 = ops.prim.NumToTensor(torch.size(input28, 2))
  _26 = ops.prim.NumToTensor(torch.size(input28, 3))
  size_prods24 = torch.mul_(size_prods23, _25)
  size_prods25 = torch.mul_(size_prods24, _26)
  input29 = torch.batch_norm(input28, slot68, slot67, slot66, slot65, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input30 = torch.relu_(input29)
  input31 = torch._convolution(input30, slot63, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _27 = torch.add_(slot58, CONSTANTS.c0, alpha=1)
  size_prods26 = ops.prim.NumToTensor(torch.size(input31, 0))
  _28 = ops.prim.NumToTensor(torch.size(input31, 2))
  _29 = ops.prim.NumToTensor(torch.size(input31, 3))
  size_prods27 = torch.mul_(size_prods26, _28)
  size_prods28 = torch.mul_(size_prods27, _29)
  input32 = torch.batch_norm(input31, slot62, slot61, slot60, slot59, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input33 = torch.relu_(input32)
  dec4 = torch._convolution(input33, slot57, slot56, [2, 2], [0, 0], [1, 1], True, [0, 0], 1, False, False, True)
  input34 = torch.cat([dec4, input26], 1)
  input35 = torch._convolution(input34, slot55, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _30 = torch.add_(slot50, CONSTANTS.c0, alpha=1)
  size_prods29 = ops.prim.NumToTensor(torch.size(input35, 0))
  _31 = ops.prim.NumToTensor(torch.size(input35, 2))
  _32 = ops.prim.NumToTensor(torch.size(input35, 3))
  size_prods30 = torch.mul_(size_prods29, _31)
  size_prods31 = torch.mul_(size_prods30, _32)
  input36 = torch.batch_norm(input35, slot54, slot53, slot52, slot51, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input37 = torch.relu_(input36)
  input38 = torch._convolution(input37, slot49, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _33 = torch.add_(slot44, CONSTANTS.c0, alpha=1)
  size_prods32 = ops.prim.NumToTensor(torch.size(input38, 0))
  _34 = ops.prim.NumToTensor(torch.size(input38, 2))
  _35 = ops.prim.NumToTensor(torch.size(input38, 3))
  size_prods33 = torch.mul_(size_prods32, _34)
  size_prods34 = torch.mul_(size_prods33, _35)
  input39 = torch.batch_norm(input38, slot48, slot47, slot46, slot45, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input40 = torch.relu_(input39)
  dec3 = torch._convolution(input40, slot43, slot42, [2, 2], [0, 0], [1, 1], True, [0, 0], 1, False, False, True)
  input41 = torch.cat([dec3, input19], 1)
  input42 = torch._convolution(input41, slot41, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _36 = torch.add_(slot36, CONSTANTS.c0, alpha=1)
  size_prods35 = ops.prim.NumToTensor(torch.size(input42, 0))
  _37 = ops.prim.NumToTensor(torch.size(input42, 2))
  _38 = ops.prim.NumToTensor(torch.size(input42, 3))
  size_prods36 = torch.mul_(size_prods35, _37)
  size_prods37 = torch.mul_(size_prods36, _38)
  input43 = torch.batch_norm(input42, slot40, slot39, slot38, slot37, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input44 = torch.relu_(input43)
  input45 = torch._convolution(input44, slot35, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _39 = torch.add_(slot30, CONSTANTS.c0, alpha=1)
  size_prods38 = ops.prim.NumToTensor(torch.size(input45, 0))
  _40 = ops.prim.NumToTensor(torch.size(input45, 2))
  _41 = ops.prim.NumToTensor(torch.size(input45, 3))
  size_prods39 = torch.mul_(size_prods38, _40)
  size_prods40 = torch.mul_(size_prods39, _41)
  input46 = torch.batch_norm(input45, slot34, slot33, slot32, slot31, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input47 = torch.relu_(input46)
  dec2 = torch._convolution(input47, slot29, slot28, [2, 2], [0, 0], [1, 1], True, [0, 0], 1, False, False, True)
  input48 = torch.cat([dec2, input12], 1)
  input49 = torch._convolution(input48, slot27, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _42 = torch.add_(slot22, CONSTANTS.c0, alpha=1)
  size_prods41 = ops.prim.NumToTensor(torch.size(input49, 0))
  _43 = ops.prim.NumToTensor(torch.size(input49, 2))
  _44 = ops.prim.NumToTensor(torch.size(input49, 3))
  size_prods42 = torch.mul_(size_prods41, _43)
  size_prods43 = torch.mul_(size_prods42, _44)
  input50 = torch.batch_norm(input49, slot26, slot25, slot24, slot23, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input51 = torch.relu_(input50)
  input52 = torch._convolution(input51, slot21, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _45 = torch.add_(slot16, CONSTANTS.c0, alpha=1)
  size_prods44 = ops.prim.NumToTensor(torch.size(input52, 0))
  _46 = ops.prim.NumToTensor(torch.size(input52, 2))
  _47 = ops.prim.NumToTensor(torch.size(input52, 3))
  size_prods45 = torch.mul_(size_prods44, _46)
  size_prods46 = torch.mul_(size_prods45, _47)
  input53 = torch.batch_norm(input52, slot20, slot19, slot18, slot17, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input54 = torch.relu_(input53)
  dec1 = torch._convolution(input54, slot15, slot14, [2, 2], [0, 0], [1, 1], True, [0, 0], 1, False, False, True)
  input55 = torch.cat([dec1, input5], 1)
  input56 = torch._convolution(input55, slot13, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _48 = torch.add_(slot8, CONSTANTS.c0, alpha=1)
  size_prods47 = ops.prim.NumToTensor(torch.size(input56, 0))
  _49 = ops.prim.NumToTensor(torch.size(input56, 2))
  _50 = ops.prim.NumToTensor(torch.size(input56, 3))
  size_prods48 = torch.mul_(size_prods47, _49)
  size_prods49 = torch.mul_(size_prods48, _50)
  input57 = torch.batch_norm(input56, slot12, slot11, slot10, slot9, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input58 = torch.relu_(input57)
  input59 = torch._convolution(input58, slot7, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
  _51 = torch.add_(slot2, CONSTANTS.c0, alpha=1)
  size_prods50 = ops.prim.NumToTensor(torch.size(input59, 0))
  _52 = ops.prim.NumToTensor(torch.size(input59, 2))
  _53 = ops.prim.NumToTensor(torch.size(input59, 3))
  size_prods51 = torch.mul_(size_prods50, _52)
  size_prods52 = torch.mul_(size_prods51, _53)
  input60 = torch.batch_norm(input59, slot6, slot5, slot4, slot3, True, 0.10000000000000001, 1.0000000000000001e-05, True)
  input61 = torch.relu_(input60)
  _54 = torch._convolution(input61, slot1, slot0, [1, 1], [0, 0], [1, 1], False, [0, 0], 1, False, False, True)
  return _54

