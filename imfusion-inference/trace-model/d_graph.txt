graph(%input.1 : Float(1, 1, 256, 256),
      %1030 : Tensor,
      %1031 : Tensor,
      %1032 : Tensor,
      %1033 : Tensor,
      %1034 : Tensor,
      %1035 : Tensor,
      %1036 : Tensor,
      %1037 : Tensor,
      %1038 : Tensor,
      %1039 : Tensor,
      %1040 : Tensor,
      %1041 : Tensor,
      %1042 : Tensor,
      %1043 : Tensor,
      %1044 : Tensor,
      %1045 : Tensor,
      %1046 : Tensor,
      %1047 : Tensor,
      %1048 : Tensor,
      %1049 : Tensor,
      %1050 : Tensor,
      %1051 : Tensor,
      %1052 : Tensor,
      %1053 : Tensor,
      %1054 : Tensor,
      %1055 : Tensor,
      %1056 : Tensor,
      %1057 : Tensor,
      %1058 : Tensor,
      %1059 : Tensor,
      %1060 : Tensor,
      %1061 : Tensor,
      %1062 : Tensor,
      %1063 : Tensor,
      %1064 : Tensor,
      %1065 : Tensor,
      %1066 : Tensor,
      %1067 : Tensor,
      %1068 : Tensor,
      %1069 : Tensor,
      %1070 : Tensor,
      %1071 : Tensor,
      %1072 : Tensor,
      %1073 : Tensor,
      %1074 : Tensor,
      %1075 : Tensor,
      %1076 : Tensor,
      %1077 : Tensor,
      %1078 : Tensor,
      %1079 : Tensor,
      %1080 : Tensor,
      %1081 : Tensor,
      %1082 : Tensor,
      %1083 : Tensor,
      %1084 : Tensor,
      %1085 : Tensor,
      %1086 : Tensor,
      %1087 : Tensor,
      %1088 : Tensor,
      %1089 : Tensor,
      %1090 : Tensor,
      %1091 : Tensor,
      %1092 : Tensor,
      %1093 : Tensor,
      %1094 : Tensor,
      %1095 : Tensor,
      %1096 : Tensor,
      %1097 : Tensor,
      %1098 : Tensor,
      %1099 : Tensor,
      %1100 : Tensor,
      %1101 : Tensor,
      %1102 : Tensor,
      %1103 : Tensor,
      %1104 : Tensor,
      %1105 : Tensor,
      %1106 : Tensor,
      %1107 : Tensor,
      %1108 : Tensor,
      %1109 : Tensor,
      %1110 : Tensor,
      %1111 : Tensor,
      %1112 : Tensor,
      %1113 : Tensor,
      %1114 : Tensor,
      %1115 : Tensor,
      %1116 : Tensor,
      %1117 : Tensor,
      %1118 : Tensor,
      %1119 : Tensor,
      %1120 : Tensor,
      %1121 : Tensor,
      %1122 : Tensor,
      %1123 : Tensor,
      %1124 : Tensor,
      %1125 : Tensor,
      %1126 : Tensor,
      %1127 : Tensor,
      %1128 : Tensor,
      %1129 : Tensor,
      %1130 : Tensor,
      %1131 : Tensor,
      %1132 : Tensor,
      %1133 : Tensor,
      %1134 : Tensor,
      %1135 : Tensor,
      %1136 : Tensor,
      %1137 : Tensor,
      %1138 : Tensor,
      %1139 : Tensor,
      %1140 : Tensor,
      %1141 : Tensor,
      %1142 : Tensor,
      %1143 : Tensor,
      %1144 : Tensor,
      %1145 : Tensor,
      %1146 : Tensor,
      %1147 : Tensor):
  %170 : Tensor? = prim::Constant(), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %171 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %172 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %173 : int[] = prim::ListConstruct(%171, %172), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %174 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %175 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %176 : int[] = prim::ListConstruct(%174, %175), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %177 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %178 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %179 : int[] = prim::ListConstruct(%177, %178), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %180 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %181 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %182 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %183 : int[] = prim::ListConstruct(%181, %182), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %184 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %185 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %186 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %187 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %input.2 : Float(1, 32, 256, 256) = aten::_convolution(%input.1, %1147, %170, %173, %176, %179, %180, %183, %184, %185, %186, %187), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv1]
  %189 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %190 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %191 : Long() = aten::add_(%1142, %189, %190), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %192 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %193 : int = aten::size(%input.2, %192), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %size_prods.1 : Long() = prim::NumToTensor(%193), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %195 : int = prim::Constant[value=2](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %196 : int = aten::size(%input.2, %195), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %197 : Long() = prim::NumToTensor(%196), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %198 : int = prim::Constant[value=3](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %199 : int = aten::size(%input.2, %198), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %200 : Long() = prim::NumToTensor(%199), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %size_prods.2 : Long() = aten::mul_(%size_prods.1, %197), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %size_prods.3 : Long() = aten::mul_(%size_prods.2, %200), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %203 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %204 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %205 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %206 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %input.3 : Float(1, 32, 256, 256) = aten::batch_norm(%input.2, %1146, %1145, %1144, %1143, %203, %204, %205, %206), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm1]
  %input.4 : Float(1, 32, 256, 256) = aten::relu_(%input.3), scope: UNet/Sequential[encoder1]/ReLU[encoder1relu1]
  %209 : Tensor? = prim::Constant(), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %210 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %211 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %212 : int[] = prim::ListConstruct(%210, %211), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %213 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %214 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %215 : int[] = prim::ListConstruct(%213, %214), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %216 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %217 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %218 : int[] = prim::ListConstruct(%216, %217), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %219 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %220 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %221 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %222 : int[] = prim::ListConstruct(%220, %221), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %223 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %224 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %225 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %226 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %input.5 : Float(1, 32, 256, 256) = aten::_convolution(%input.4, %1141, %209, %212, %215, %218, %219, %222, %223, %224, %225, %226), scope: UNet/Sequential[encoder1]/Conv2d[encoder1conv2]
  %228 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %229 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %230 : Long() = aten::add_(%1136, %228, %229), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %231 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %232 : int = aten::size(%input.5, %231), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %size_prods.4 : Long() = prim::NumToTensor(%232), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %234 : int = prim::Constant[value=2](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %235 : int = aten::size(%input.5, %234), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %236 : Long() = prim::NumToTensor(%235), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %237 : int = prim::Constant[value=3](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %238 : int = aten::size(%input.5, %237), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %239 : Long() = prim::NumToTensor(%238), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %size_prods.5 : Long() = aten::mul_(%size_prods.4, %236), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %size_prods.6 : Long() = aten::mul_(%size_prods.5, %239), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %242 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %243 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %244 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %245 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %input.6 : Float(1, 32, 256, 256) = aten::batch_norm(%input.5, %1140, %1139, %1138, %1137, %242, %243, %244, %245), scope: UNet/Sequential[encoder1]/BatchNorm2d[encoder1norm2]
  %input.7 : Float(1, 32, 256, 256) = aten::relu_(%input.6), scope: UNet/Sequential[encoder1]/ReLU[encoder1relu2]
  %248 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool1]
  %249 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool1]
  %250 : int[] = prim::ListConstruct(%248, %249), scope: UNet/MaxPool2d[pool1]
  %251 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool1]
  %252 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool1]
  %253 : int[] = prim::ListConstruct(%251, %252), scope: UNet/MaxPool2d[pool1]
  %254 : int = prim::Constant[value=0](), scope: UNet/MaxPool2d[pool1]
  %255 : int = prim::Constant[value=0](), scope: UNet/MaxPool2d[pool1]
  %256 : int[] = prim::ListConstruct(%254, %255), scope: UNet/MaxPool2d[pool1]
  %257 : int = prim::Constant[value=1](), scope: UNet/MaxPool2d[pool1]
  %258 : int = prim::Constant[value=1](), scope: UNet/MaxPool2d[pool1]
  %259 : int[] = prim::ListConstruct(%257, %258), scope: UNet/MaxPool2d[pool1]
  %260 : bool = prim::Constant[value=0](), scope: UNet/MaxPool2d[pool1]
  %input.8 : Float(1, 32, 128, 128) = aten::max_pool2d(%input.7, %250, %253, %256, %259, %260), scope: UNet/MaxPool2d[pool1]
  %262 : Tensor? = prim::Constant(), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %263 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %264 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %265 : int[] = prim::ListConstruct(%263, %264), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %266 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %267 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %268 : int[] = prim::ListConstruct(%266, %267), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %269 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %270 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %271 : int[] = prim::ListConstruct(%269, %270), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %272 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %273 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %274 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %275 : int[] = prim::ListConstruct(%273, %274), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %276 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %277 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %278 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %279 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %input.9 : Float(1, 64, 128, 128) = aten::_convolution(%input.8, %1135, %262, %265, %268, %271, %272, %275, %276, %277, %278, %279), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv1]
  %281 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %282 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %283 : Long() = aten::add_(%1130, %281, %282), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %284 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %285 : int = aten::size(%input.9, %284), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %size_prods.7 : Long() = prim::NumToTensor(%285), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %287 : int = prim::Constant[value=2](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %288 : int = aten::size(%input.9, %287), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %289 : Long() = prim::NumToTensor(%288), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %290 : int = prim::Constant[value=3](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %291 : int = aten::size(%input.9, %290), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %292 : Long() = prim::NumToTensor(%291), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %size_prods.8 : Long() = aten::mul_(%size_prods.7, %289), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %size_prods.9 : Long() = aten::mul_(%size_prods.8, %292), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %295 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %296 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %297 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %298 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %input.10 : Float(1, 64, 128, 128) = aten::batch_norm(%input.9, %1134, %1133, %1132, %1131, %295, %296, %297, %298), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm1]
  %input.11 : Float(1, 64, 128, 128) = aten::relu_(%input.10), scope: UNet/Sequential[encoder2]/ReLU[encoder2relu1]
  %301 : Tensor? = prim::Constant(), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %302 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %303 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %304 : int[] = prim::ListConstruct(%302, %303), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %305 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %306 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %307 : int[] = prim::ListConstruct(%305, %306), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %308 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %309 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %310 : int[] = prim::ListConstruct(%308, %309), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %311 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %312 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %313 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %314 : int[] = prim::ListConstruct(%312, %313), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %315 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %316 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %317 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %318 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %input.12 : Float(1, 64, 128, 128) = aten::_convolution(%input.11, %1129, %301, %304, %307, %310, %311, %314, %315, %316, %317, %318), scope: UNet/Sequential[encoder2]/Conv2d[encoder2conv2]
  %320 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %321 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %322 : Long() = aten::add_(%1124, %320, %321), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %323 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %324 : int = aten::size(%input.12, %323), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %size_prods.10 : Long() = prim::NumToTensor(%324), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %326 : int = prim::Constant[value=2](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %327 : int = aten::size(%input.12, %326), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %328 : Long() = prim::NumToTensor(%327), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %329 : int = prim::Constant[value=3](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %330 : int = aten::size(%input.12, %329), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %331 : Long() = prim::NumToTensor(%330), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %size_prods.11 : Long() = aten::mul_(%size_prods.10, %328), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %size_prods.12 : Long() = aten::mul_(%size_prods.11, %331), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %334 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %335 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %336 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %337 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %input.13 : Float(1, 64, 128, 128) = aten::batch_norm(%input.12, %1128, %1127, %1126, %1125, %334, %335, %336, %337), scope: UNet/Sequential[encoder2]/BatchNorm2d[encoder2norm2]
  %input.14 : Float(1, 64, 128, 128) = aten::relu_(%input.13), scope: UNet/Sequential[encoder2]/ReLU[encoder2relu2]
  %340 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool2]
  %341 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool2]
  %342 : int[] = prim::ListConstruct(%340, %341), scope: UNet/MaxPool2d[pool2]
  %343 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool2]
  %344 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool2]
  %345 : int[] = prim::ListConstruct(%343, %344), scope: UNet/MaxPool2d[pool2]
  %346 : int = prim::Constant[value=0](), scope: UNet/MaxPool2d[pool2]
  %347 : int = prim::Constant[value=0](), scope: UNet/MaxPool2d[pool2]
  %348 : int[] = prim::ListConstruct(%346, %347), scope: UNet/MaxPool2d[pool2]
  %349 : int = prim::Constant[value=1](), scope: UNet/MaxPool2d[pool2]
  %350 : int = prim::Constant[value=1](), scope: UNet/MaxPool2d[pool2]
  %351 : int[] = prim::ListConstruct(%349, %350), scope: UNet/MaxPool2d[pool2]
  %352 : bool = prim::Constant[value=0](), scope: UNet/MaxPool2d[pool2]
  %input.15 : Float(1, 64, 64, 64) = aten::max_pool2d(%input.14, %342, %345, %348, %351, %352), scope: UNet/MaxPool2d[pool2]
  %354 : Tensor? = prim::Constant(), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %355 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %356 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %357 : int[] = prim::ListConstruct(%355, %356), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %358 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %359 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %360 : int[] = prim::ListConstruct(%358, %359), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %361 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %362 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %363 : int[] = prim::ListConstruct(%361, %362), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %364 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %365 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %366 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %367 : int[] = prim::ListConstruct(%365, %366), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %368 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %369 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %370 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %371 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %input.16 : Float(1, 128, 64, 64) = aten::_convolution(%input.15, %1123, %354, %357, %360, %363, %364, %367, %368, %369, %370, %371), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv1]
  %373 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %374 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %375 : Long() = aten::add_(%1118, %373, %374), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %376 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %377 : int = aten::size(%input.16, %376), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %size_prods.13 : Long() = prim::NumToTensor(%377), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %379 : int = prim::Constant[value=2](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %380 : int = aten::size(%input.16, %379), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %381 : Long() = prim::NumToTensor(%380), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %382 : int = prim::Constant[value=3](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %383 : int = aten::size(%input.16, %382), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %384 : Long() = prim::NumToTensor(%383), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %size_prods.14 : Long() = aten::mul_(%size_prods.13, %381), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %size_prods.15 : Long() = aten::mul_(%size_prods.14, %384), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %387 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %388 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %389 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %390 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %input.17 : Float(1, 128, 64, 64) = aten::batch_norm(%input.16, %1122, %1121, %1120, %1119, %387, %388, %389, %390), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm1]
  %input.18 : Float(1, 128, 64, 64) = aten::relu_(%input.17), scope: UNet/Sequential[encoder3]/ReLU[encoder3relu1]
  %393 : Tensor? = prim::Constant(), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %394 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %395 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %396 : int[] = prim::ListConstruct(%394, %395), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %397 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %398 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %399 : int[] = prim::ListConstruct(%397, %398), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %400 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %401 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %402 : int[] = prim::ListConstruct(%400, %401), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %403 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %404 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %405 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %406 : int[] = prim::ListConstruct(%404, %405), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %407 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %408 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %409 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %410 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %input.19 : Float(1, 128, 64, 64) = aten::_convolution(%input.18, %1117, %393, %396, %399, %402, %403, %406, %407, %408, %409, %410), scope: UNet/Sequential[encoder3]/Conv2d[encoder3conv2]
  %412 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %413 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %414 : Long() = aten::add_(%1112, %412, %413), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %415 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %416 : int = aten::size(%input.19, %415), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %size_prods.16 : Long() = prim::NumToTensor(%416), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %418 : int = prim::Constant[value=2](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %419 : int = aten::size(%input.19, %418), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %420 : Long() = prim::NumToTensor(%419), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %421 : int = prim::Constant[value=3](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %422 : int = aten::size(%input.19, %421), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %423 : Long() = prim::NumToTensor(%422), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %size_prods.17 : Long() = aten::mul_(%size_prods.16, %420), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %size_prods.18 : Long() = aten::mul_(%size_prods.17, %423), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %426 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %427 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %428 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %429 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %input.20 : Float(1, 128, 64, 64) = aten::batch_norm(%input.19, %1116, %1115, %1114, %1113, %426, %427, %428, %429), scope: UNet/Sequential[encoder3]/BatchNorm2d[encoder3norm2]
  %input.21 : Float(1, 128, 64, 64) = aten::relu_(%input.20), scope: UNet/Sequential[encoder3]/ReLU[encoder3relu2]
  %432 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool3]
  %433 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool3]
  %434 : int[] = prim::ListConstruct(%432, %433), scope: UNet/MaxPool2d[pool3]
  %435 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool3]
  %436 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool3]
  %437 : int[] = prim::ListConstruct(%435, %436), scope: UNet/MaxPool2d[pool3]
  %438 : int = prim::Constant[value=0](), scope: UNet/MaxPool2d[pool3]
  %439 : int = prim::Constant[value=0](), scope: UNet/MaxPool2d[pool3]
  %440 : int[] = prim::ListConstruct(%438, %439), scope: UNet/MaxPool2d[pool3]
  %441 : int = prim::Constant[value=1](), scope: UNet/MaxPool2d[pool3]
  %442 : int = prim::Constant[value=1](), scope: UNet/MaxPool2d[pool3]
  %443 : int[] = prim::ListConstruct(%441, %442), scope: UNet/MaxPool2d[pool3]
  %444 : bool = prim::Constant[value=0](), scope: UNet/MaxPool2d[pool3]
  %input.22 : Float(1, 128, 32, 32) = aten::max_pool2d(%input.21, %434, %437, %440, %443, %444), scope: UNet/MaxPool2d[pool3]
  %446 : Tensor? = prim::Constant(), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %447 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %448 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %449 : int[] = prim::ListConstruct(%447, %448), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %450 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %451 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %452 : int[] = prim::ListConstruct(%450, %451), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %453 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %454 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %455 : int[] = prim::ListConstruct(%453, %454), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %456 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %457 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %458 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %459 : int[] = prim::ListConstruct(%457, %458), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %460 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %461 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %462 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %463 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %input.23 : Float(1, 256, 32, 32) = aten::_convolution(%input.22, %1111, %446, %449, %452, %455, %456, %459, %460, %461, %462, %463), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv1]
  %465 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %466 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %467 : Long() = aten::add_(%1106, %465, %466), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %468 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %469 : int = aten::size(%input.23, %468), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %size_prods.19 : Long() = prim::NumToTensor(%469), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %471 : int = prim::Constant[value=2](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %472 : int = aten::size(%input.23, %471), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %473 : Long() = prim::NumToTensor(%472), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %474 : int = prim::Constant[value=3](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %475 : int = aten::size(%input.23, %474), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %476 : Long() = prim::NumToTensor(%475), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %size_prods.20 : Long() = aten::mul_(%size_prods.19, %473), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %size_prods.21 : Long() = aten::mul_(%size_prods.20, %476), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %479 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %480 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %481 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %482 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %input.24 : Float(1, 256, 32, 32) = aten::batch_norm(%input.23, %1110, %1109, %1108, %1107, %479, %480, %481, %482), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm1]
  %input.25 : Float(1, 256, 32, 32) = aten::relu_(%input.24), scope: UNet/Sequential[encoder4]/ReLU[encoder4relu1]
  %485 : Tensor? = prim::Constant(), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %486 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %487 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %488 : int[] = prim::ListConstruct(%486, %487), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %489 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %490 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %491 : int[] = prim::ListConstruct(%489, %490), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %492 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %493 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %494 : int[] = prim::ListConstruct(%492, %493), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %495 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %496 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %497 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %498 : int[] = prim::ListConstruct(%496, %497), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %499 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %500 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %501 : bool = prim::Constant[value=0](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %502 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %input.26 : Float(1, 256, 32, 32) = aten::_convolution(%input.25, %1105, %485, %488, %491, %494, %495, %498, %499, %500, %501, %502), scope: UNet/Sequential[encoder4]/Conv2d[encoder4conv2]
  %504 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %505 : int = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %506 : Long() = aten::add_(%1100, %504, %505), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %507 : int = prim::Constant[value=0](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %508 : int = aten::size(%input.26, %507), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %size_prods.22 : Long() = prim::NumToTensor(%508), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %510 : int = prim::Constant[value=2](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %511 : int = aten::size(%input.26, %510), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %512 : Long() = prim::NumToTensor(%511), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %513 : int = prim::Constant[value=3](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %514 : int = aten::size(%input.26, %513), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %515 : Long() = prim::NumToTensor(%514), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %size_prods.23 : Long() = aten::mul_(%size_prods.22, %512), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %size_prods.24 : Long() = aten::mul_(%size_prods.23, %515), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %518 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %519 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %520 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %521 : bool = prim::Constant[value=1](), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %input.27 : Float(1, 256, 32, 32) = aten::batch_norm(%input.26, %1104, %1103, %1102, %1101, %518, %519, %520, %521), scope: UNet/Sequential[encoder4]/BatchNorm2d[encoder4norm2]
  %input.28 : Float(1, 256, 32, 32) = aten::relu_(%input.27), scope: UNet/Sequential[encoder4]/ReLU[encoder4relu2]
  %524 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool4]
  %525 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool4]
  %526 : int[] = prim::ListConstruct(%524, %525), scope: UNet/MaxPool2d[pool4]
  %527 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool4]
  %528 : int = prim::Constant[value=2](), scope: UNet/MaxPool2d[pool4]
  %529 : int[] = prim::ListConstruct(%527, %528), scope: UNet/MaxPool2d[pool4]
  %530 : int = prim::Constant[value=0](), scope: UNet/MaxPool2d[pool4]
  %531 : int = prim::Constant[value=0](), scope: UNet/MaxPool2d[pool4]
  %532 : int[] = prim::ListConstruct(%530, %531), scope: UNet/MaxPool2d[pool4]
  %533 : int = prim::Constant[value=1](), scope: UNet/MaxPool2d[pool4]
  %534 : int = prim::Constant[value=1](), scope: UNet/MaxPool2d[pool4]
  %535 : int[] = prim::ListConstruct(%533, %534), scope: UNet/MaxPool2d[pool4]
  %536 : bool = prim::Constant[value=0](), scope: UNet/MaxPool2d[pool4]
  %input.29 : Float(1, 256, 16, 16) = aten::max_pool2d(%input.28, %526, %529, %532, %535, %536), scope: UNet/MaxPool2d[pool4]
  %538 : Tensor? = prim::Constant(), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %539 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %540 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %541 : int[] = prim::ListConstruct(%539, %540), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %542 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %543 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %544 : int[] = prim::ListConstruct(%542, %543), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %545 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %546 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %547 : int[] = prim::ListConstruct(%545, %546), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %548 : bool = prim::Constant[value=0](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %549 : int = prim::Constant[value=0](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %550 : int = prim::Constant[value=0](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %551 : int[] = prim::ListConstruct(%549, %550), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %552 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %553 : bool = prim::Constant[value=0](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %554 : bool = prim::Constant[value=0](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %555 : bool = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %input.30 : Float(1, 512, 16, 16) = aten::_convolution(%input.29, %1099, %538, %541, %544, %547, %548, %551, %552, %553, %554, %555), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv1]
  %557 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %558 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %559 : Long() = aten::add_(%1094, %557, %558), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %560 : int = prim::Constant[value=0](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %561 : int = aten::size(%input.30, %560), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %size_prods.25 : Long() = prim::NumToTensor(%561), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %563 : int = prim::Constant[value=2](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %564 : int = aten::size(%input.30, %563), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %565 : Long() = prim::NumToTensor(%564), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %566 : int = prim::Constant[value=3](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %567 : int = aten::size(%input.30, %566), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %568 : Long() = prim::NumToTensor(%567), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %size_prods.26 : Long() = aten::mul_(%size_prods.25, %565), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %size_prods.27 : Long() = aten::mul_(%size_prods.26, %568), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %571 : bool = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %572 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %573 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %574 : bool = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %input.31 : Float(1, 512, 16, 16) = aten::batch_norm(%input.30, %1098, %1097, %1096, %1095, %571, %572, %573, %574), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm1]
  %input.32 : Float(1, 512, 16, 16) = aten::relu_(%input.31), scope: UNet/Sequential[bottleneck]/ReLU[bottleneckrelu1]
  %577 : Tensor? = prim::Constant(), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %578 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %579 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %580 : int[] = prim::ListConstruct(%578, %579), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %581 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %582 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %583 : int[] = prim::ListConstruct(%581, %582), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %584 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %585 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %586 : int[] = prim::ListConstruct(%584, %585), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %587 : bool = prim::Constant[value=0](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %588 : int = prim::Constant[value=0](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %589 : int = prim::Constant[value=0](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %590 : int[] = prim::ListConstruct(%588, %589), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %591 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %592 : bool = prim::Constant[value=0](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %593 : bool = prim::Constant[value=0](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %594 : bool = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %input.33 : Float(1, 512, 16, 16) = aten::_convolution(%input.32, %1093, %577, %580, %583, %586, %587, %590, %591, %592, %593, %594), scope: UNet/Sequential[bottleneck]/Conv2d[bottleneckconv2]
  %596 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %597 : int = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %598 : Long() = aten::add_(%1088, %596, %597), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %599 : int = prim::Constant[value=0](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %600 : int = aten::size(%input.33, %599), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %size_prods.28 : Long() = prim::NumToTensor(%600), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %602 : int = prim::Constant[value=2](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %603 : int = aten::size(%input.33, %602), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %604 : Long() = prim::NumToTensor(%603), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %605 : int = prim::Constant[value=3](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %606 : int = aten::size(%input.33, %605), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %607 : Long() = prim::NumToTensor(%606), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %size_prods.29 : Long() = aten::mul_(%size_prods.28, %604), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %size_prods.30 : Long() = aten::mul_(%size_prods.29, %607), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %610 : bool = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %611 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %612 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %613 : bool = prim::Constant[value=1](), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %input.34 : Float(1, 512, 16, 16) = aten::batch_norm(%input.33, %1092, %1091, %1090, %1089, %610, %611, %612, %613), scope: UNet/Sequential[bottleneck]/BatchNorm2d[bottlenecknorm2]
  %input.35 : Float(1, 512, 16, 16) = aten::relu_(%input.34), scope: UNet/Sequential[bottleneck]/ReLU[bottleneckrelu2]
  %616 : int = prim::Constant[value=2](), scope: UNet/ConvTranspose2d[upconv4]
  %617 : int = prim::Constant[value=2](), scope: UNet/ConvTranspose2d[upconv4]
  %618 : int[] = prim::ListConstruct(%616, %617), scope: UNet/ConvTranspose2d[upconv4]
  %619 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv4]
  %620 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv4]
  %621 : int[] = prim::ListConstruct(%619, %620), scope: UNet/ConvTranspose2d[upconv4]
  %622 : int = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv4]
  %623 : int = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv4]
  %624 : int[] = prim::ListConstruct(%622, %623), scope: UNet/ConvTranspose2d[upconv4]
  %625 : bool = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv4]
  %626 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv4]
  %627 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv4]
  %628 : int[] = prim::ListConstruct(%626, %627), scope: UNet/ConvTranspose2d[upconv4]
  %629 : int = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv4]
  %630 : bool = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv4]
  %631 : bool = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv4]
  %632 : bool = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv4]
  %dec4 : Float(1, 256, 32, 32) = aten::_convolution(%input.35, %1087, %1086, %618, %621, %624, %625, %628, %629, %630, %631, %632), scope: UNet/ConvTranspose2d[upconv4]
  %634 : Tensor[] = prim::ListConstruct(%dec4, %input.28), scope: UNet
  %635 : int = prim::Constant[value=1](), scope: UNet
  %input.36 : Float(1, 512, 32, 32) = aten::cat(%634, %635), scope: UNet
  %637 : Tensor? = prim::Constant(), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %638 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %639 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %640 : int[] = prim::ListConstruct(%638, %639), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %641 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %642 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %643 : int[] = prim::ListConstruct(%641, %642), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %644 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %645 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %646 : int[] = prim::ListConstruct(%644, %645), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %647 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %648 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %649 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %650 : int[] = prim::ListConstruct(%648, %649), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %651 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %652 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %653 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %654 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %input.37 : Float(1, 256, 32, 32) = aten::_convolution(%input.36, %1085, %637, %640, %643, %646, %647, %650, %651, %652, %653, %654), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv1]
  %656 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %657 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %658 : Long() = aten::add_(%1080, %656, %657), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %659 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %660 : int = aten::size(%input.37, %659), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %size_prods.31 : Long() = prim::NumToTensor(%660), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %662 : int = prim::Constant[value=2](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %663 : int = aten::size(%input.37, %662), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %664 : Long() = prim::NumToTensor(%663), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %665 : int = prim::Constant[value=3](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %666 : int = aten::size(%input.37, %665), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %667 : Long() = prim::NumToTensor(%666), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %size_prods.32 : Long() = aten::mul_(%size_prods.31, %664), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %size_prods.33 : Long() = aten::mul_(%size_prods.32, %667), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %670 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %671 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %672 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %673 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %input.38 : Float(1, 256, 32, 32) = aten::batch_norm(%input.37, %1084, %1083, %1082, %1081, %670, %671, %672, %673), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm1]
  %input.39 : Float(1, 256, 32, 32) = aten::relu_(%input.38), scope: UNet/Sequential[decoder4]/ReLU[decoder4relu1]
  %676 : Tensor? = prim::Constant(), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %677 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %678 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %679 : int[] = prim::ListConstruct(%677, %678), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %680 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %681 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %682 : int[] = prim::ListConstruct(%680, %681), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %683 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %684 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %685 : int[] = prim::ListConstruct(%683, %684), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %686 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %687 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %688 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %689 : int[] = prim::ListConstruct(%687, %688), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %690 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %691 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %692 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %693 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %input.40 : Float(1, 256, 32, 32) = aten::_convolution(%input.39, %1079, %676, %679, %682, %685, %686, %689, %690, %691, %692, %693), scope: UNet/Sequential[decoder4]/Conv2d[decoder4conv2]
  %695 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %696 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %697 : Long() = aten::add_(%1074, %695, %696), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %698 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %699 : int = aten::size(%input.40, %698), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %size_prods.34 : Long() = prim::NumToTensor(%699), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %701 : int = prim::Constant[value=2](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %702 : int = aten::size(%input.40, %701), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %703 : Long() = prim::NumToTensor(%702), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %704 : int = prim::Constant[value=3](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %705 : int = aten::size(%input.40, %704), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %706 : Long() = prim::NumToTensor(%705), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %size_prods.35 : Long() = aten::mul_(%size_prods.34, %703), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %size_prods.36 : Long() = aten::mul_(%size_prods.35, %706), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %709 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %710 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %711 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %712 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %input.41 : Float(1, 256, 32, 32) = aten::batch_norm(%input.40, %1078, %1077, %1076, %1075, %709, %710, %711, %712), scope: UNet/Sequential[decoder4]/BatchNorm2d[decoder4norm2]
  %input.42 : Float(1, 256, 32, 32) = aten::relu_(%input.41), scope: UNet/Sequential[decoder4]/ReLU[decoder4relu2]
  %715 : int = prim::Constant[value=2](), scope: UNet/ConvTranspose2d[upconv3]
  %716 : int = prim::Constant[value=2](), scope: UNet/ConvTranspose2d[upconv3]
  %717 : int[] = prim::ListConstruct(%715, %716), scope: UNet/ConvTranspose2d[upconv3]
  %718 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv3]
  %719 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv3]
  %720 : int[] = prim::ListConstruct(%718, %719), scope: UNet/ConvTranspose2d[upconv3]
  %721 : int = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv3]
  %722 : int = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv3]
  %723 : int[] = prim::ListConstruct(%721, %722), scope: UNet/ConvTranspose2d[upconv3]
  %724 : bool = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv3]
  %725 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv3]
  %726 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv3]
  %727 : int[] = prim::ListConstruct(%725, %726), scope: UNet/ConvTranspose2d[upconv3]
  %728 : int = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv3]
  %729 : bool = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv3]
  %730 : bool = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv3]
  %731 : bool = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv3]
  %dec3 : Float(1, 128, 64, 64) = aten::_convolution(%input.42, %1073, %1072, %717, %720, %723, %724, %727, %728, %729, %730, %731), scope: UNet/ConvTranspose2d[upconv3]
  %733 : Tensor[] = prim::ListConstruct(%dec3, %input.21), scope: UNet
  %734 : int = prim::Constant[value=1](), scope: UNet
  %input.43 : Float(1, 256, 64, 64) = aten::cat(%733, %734), scope: UNet
  %736 : Tensor? = prim::Constant(), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %737 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %738 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %739 : int[] = prim::ListConstruct(%737, %738), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %740 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %741 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %742 : int[] = prim::ListConstruct(%740, %741), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %743 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %744 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %745 : int[] = prim::ListConstruct(%743, %744), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %746 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %747 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %748 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %749 : int[] = prim::ListConstruct(%747, %748), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %750 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %751 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %752 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %753 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %input.44 : Float(1, 128, 64, 64) = aten::_convolution(%input.43, %1071, %736, %739, %742, %745, %746, %749, %750, %751, %752, %753), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv1]
  %755 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %756 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %757 : Long() = aten::add_(%1066, %755, %756), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %758 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %759 : int = aten::size(%input.44, %758), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %size_prods.37 : Long() = prim::NumToTensor(%759), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %761 : int = prim::Constant[value=2](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %762 : int = aten::size(%input.44, %761), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %763 : Long() = prim::NumToTensor(%762), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %764 : int = prim::Constant[value=3](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %765 : int = aten::size(%input.44, %764), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %766 : Long() = prim::NumToTensor(%765), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %size_prods.38 : Long() = aten::mul_(%size_prods.37, %763), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %size_prods.39 : Long() = aten::mul_(%size_prods.38, %766), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %769 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %770 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %771 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %772 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %input.45 : Float(1, 128, 64, 64) = aten::batch_norm(%input.44, %1070, %1069, %1068, %1067, %769, %770, %771, %772), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm1]
  %input.46 : Float(1, 128, 64, 64) = aten::relu_(%input.45), scope: UNet/Sequential[decoder3]/ReLU[decoder3relu1]
  %775 : Tensor? = prim::Constant(), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %776 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %777 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %778 : int[] = prim::ListConstruct(%776, %777), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %779 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %780 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %781 : int[] = prim::ListConstruct(%779, %780), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %782 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %783 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %784 : int[] = prim::ListConstruct(%782, %783), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %785 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %786 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %787 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %788 : int[] = prim::ListConstruct(%786, %787), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %789 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %790 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %791 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %792 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %input.47 : Float(1, 128, 64, 64) = aten::_convolution(%input.46, %1065, %775, %778, %781, %784, %785, %788, %789, %790, %791, %792), scope: UNet/Sequential[decoder3]/Conv2d[decoder3conv2]
  %794 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %795 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %796 : Long() = aten::add_(%1060, %794, %795), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %797 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %798 : int = aten::size(%input.47, %797), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %size_prods.40 : Long() = prim::NumToTensor(%798), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %800 : int = prim::Constant[value=2](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %801 : int = aten::size(%input.47, %800), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %802 : Long() = prim::NumToTensor(%801), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %803 : int = prim::Constant[value=3](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %804 : int = aten::size(%input.47, %803), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %805 : Long() = prim::NumToTensor(%804), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %size_prods.41 : Long() = aten::mul_(%size_prods.40, %802), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %size_prods.42 : Long() = aten::mul_(%size_prods.41, %805), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %808 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %809 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %810 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %811 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %input.48 : Float(1, 128, 64, 64) = aten::batch_norm(%input.47, %1064, %1063, %1062, %1061, %808, %809, %810, %811), scope: UNet/Sequential[decoder3]/BatchNorm2d[decoder3norm2]
  %input.49 : Float(1, 128, 64, 64) = aten::relu_(%input.48), scope: UNet/Sequential[decoder3]/ReLU[decoder3relu2]
  %814 : int = prim::Constant[value=2](), scope: UNet/ConvTranspose2d[upconv2]
  %815 : int = prim::Constant[value=2](), scope: UNet/ConvTranspose2d[upconv2]
  %816 : int[] = prim::ListConstruct(%814, %815), scope: UNet/ConvTranspose2d[upconv2]
  %817 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv2]
  %818 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv2]
  %819 : int[] = prim::ListConstruct(%817, %818), scope: UNet/ConvTranspose2d[upconv2]
  %820 : int = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv2]
  %821 : int = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv2]
  %822 : int[] = prim::ListConstruct(%820, %821), scope: UNet/ConvTranspose2d[upconv2]
  %823 : bool = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv2]
  %824 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv2]
  %825 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv2]
  %826 : int[] = prim::ListConstruct(%824, %825), scope: UNet/ConvTranspose2d[upconv2]
  %827 : int = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv2]
  %828 : bool = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv2]
  %829 : bool = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv2]
  %830 : bool = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv2]
  %dec2 : Float(1, 64, 128, 128) = aten::_convolution(%input.49, %1059, %1058, %816, %819, %822, %823, %826, %827, %828, %829, %830), scope: UNet/ConvTranspose2d[upconv2]
  %832 : Tensor[] = prim::ListConstruct(%dec2, %input.14), scope: UNet
  %833 : int = prim::Constant[value=1](), scope: UNet
  %input.50 : Float(1, 128, 128, 128) = aten::cat(%832, %833), scope: UNet
  %835 : Tensor? = prim::Constant(), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %836 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %837 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %838 : int[] = prim::ListConstruct(%836, %837), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %839 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %840 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %841 : int[] = prim::ListConstruct(%839, %840), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %842 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %843 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %844 : int[] = prim::ListConstruct(%842, %843), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %845 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %846 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %847 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %848 : int[] = prim::ListConstruct(%846, %847), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %849 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %850 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %851 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %852 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %input.51 : Float(1, 64, 128, 128) = aten::_convolution(%input.50, %1057, %835, %838, %841, %844, %845, %848, %849, %850, %851, %852), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv1]
  %854 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %855 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %856 : Long() = aten::add_(%1052, %854, %855), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %857 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %858 : int = aten::size(%input.51, %857), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %size_prods.43 : Long() = prim::NumToTensor(%858), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %860 : int = prim::Constant[value=2](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %861 : int = aten::size(%input.51, %860), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %862 : Long() = prim::NumToTensor(%861), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %863 : int = prim::Constant[value=3](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %864 : int = aten::size(%input.51, %863), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %865 : Long() = prim::NumToTensor(%864), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %size_prods.44 : Long() = aten::mul_(%size_prods.43, %862), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %size_prods.45 : Long() = aten::mul_(%size_prods.44, %865), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %868 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %869 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %870 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %871 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %input.52 : Float(1, 64, 128, 128) = aten::batch_norm(%input.51, %1056, %1055, %1054, %1053, %868, %869, %870, %871), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm1]
  %input.53 : Float(1, 64, 128, 128) = aten::relu_(%input.52), scope: UNet/Sequential[decoder2]/ReLU[decoder2relu1]
  %874 : Tensor? = prim::Constant(), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %875 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %876 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %877 : int[] = prim::ListConstruct(%875, %876), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %878 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %879 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %880 : int[] = prim::ListConstruct(%878, %879), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %881 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %882 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %883 : int[] = prim::ListConstruct(%881, %882), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %884 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %885 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %886 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %887 : int[] = prim::ListConstruct(%885, %886), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %888 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %889 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %890 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %891 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %input.54 : Float(1, 64, 128, 128) = aten::_convolution(%input.53, %1051, %874, %877, %880, %883, %884, %887, %888, %889, %890, %891), scope: UNet/Sequential[decoder2]/Conv2d[decoder2conv2]
  %893 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %894 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %895 : Long() = aten::add_(%1046, %893, %894), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %896 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %897 : int = aten::size(%input.54, %896), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %size_prods.46 : Long() = prim::NumToTensor(%897), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %899 : int = prim::Constant[value=2](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %900 : int = aten::size(%input.54, %899), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %901 : Long() = prim::NumToTensor(%900), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %902 : int = prim::Constant[value=3](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %903 : int = aten::size(%input.54, %902), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %904 : Long() = prim::NumToTensor(%903), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %size_prods.47 : Long() = aten::mul_(%size_prods.46, %901), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %size_prods.48 : Long() = aten::mul_(%size_prods.47, %904), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %907 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %908 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %909 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %910 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %input.55 : Float(1, 64, 128, 128) = aten::batch_norm(%input.54, %1050, %1049, %1048, %1047, %907, %908, %909, %910), scope: UNet/Sequential[decoder2]/BatchNorm2d[decoder2norm2]
  %input.56 : Float(1, 64, 128, 128) = aten::relu_(%input.55), scope: UNet/Sequential[decoder2]/ReLU[decoder2relu2]
  %913 : int = prim::Constant[value=2](), scope: UNet/ConvTranspose2d[upconv1]
  %914 : int = prim::Constant[value=2](), scope: UNet/ConvTranspose2d[upconv1]
  %915 : int[] = prim::ListConstruct(%913, %914), scope: UNet/ConvTranspose2d[upconv1]
  %916 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv1]
  %917 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv1]
  %918 : int[] = prim::ListConstruct(%916, %917), scope: UNet/ConvTranspose2d[upconv1]
  %919 : int = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv1]
  %920 : int = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv1]
  %921 : int[] = prim::ListConstruct(%919, %920), scope: UNet/ConvTranspose2d[upconv1]
  %922 : bool = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv1]
  %923 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv1]
  %924 : int = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv1]
  %925 : int[] = prim::ListConstruct(%923, %924), scope: UNet/ConvTranspose2d[upconv1]
  %926 : int = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv1]
  %927 : bool = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv1]
  %928 : bool = prim::Constant[value=0](), scope: UNet/ConvTranspose2d[upconv1]
  %929 : bool = prim::Constant[value=1](), scope: UNet/ConvTranspose2d[upconv1]
  %dec1 : Float(1, 32, 256, 256) = aten::_convolution(%input.56, %1045, %1044, %915, %918, %921, %922, %925, %926, %927, %928, %929), scope: UNet/ConvTranspose2d[upconv1]
  %931 : Tensor[] = prim::ListConstruct(%dec1, %input.7), scope: UNet
  %932 : int = prim::Constant[value=1](), scope: UNet
  %input.57 : Float(1, 64, 256, 256) = aten::cat(%931, %932), scope: UNet
  %934 : Tensor? = prim::Constant(), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %935 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %936 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %937 : int[] = prim::ListConstruct(%935, %936), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %938 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %939 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %940 : int[] = prim::ListConstruct(%938, %939), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %941 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %942 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %943 : int[] = prim::ListConstruct(%941, %942), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %944 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %945 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %946 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %947 : int[] = prim::ListConstruct(%945, %946), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %948 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %949 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %950 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %951 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %input.58 : Float(1, 32, 256, 256) = aten::_convolution(%input.57, %1043, %934, %937, %940, %943, %944, %947, %948, %949, %950, %951), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv1]
  %953 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %954 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %955 : Long() = aten::add_(%1038, %953, %954), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %956 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %957 : int = aten::size(%input.58, %956), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %size_prods.49 : Long() = prim::NumToTensor(%957), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %959 : int = prim::Constant[value=2](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %960 : int = aten::size(%input.58, %959), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %961 : Long() = prim::NumToTensor(%960), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %962 : int = prim::Constant[value=3](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %963 : int = aten::size(%input.58, %962), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %964 : Long() = prim::NumToTensor(%963), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %size_prods.50 : Long() = aten::mul_(%size_prods.49, %961), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %size_prods.51 : Long() = aten::mul_(%size_prods.50, %964), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %967 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %968 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %969 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %970 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %input.59 : Float(1, 32, 256, 256) = aten::batch_norm(%input.58, %1042, %1041, %1040, %1039, %967, %968, %969, %970), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm1]
  %input.60 : Float(1, 32, 256, 256) = aten::relu_(%input.59), scope: UNet/Sequential[decoder1]/ReLU[decoder1relu1]
  %973 : Tensor? = prim::Constant(), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %974 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %975 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %976 : int[] = prim::ListConstruct(%974, %975), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %977 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %978 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %979 : int[] = prim::ListConstruct(%977, %978), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %980 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %981 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %982 : int[] = prim::ListConstruct(%980, %981), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %983 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %984 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %985 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %986 : int[] = prim::ListConstruct(%984, %985), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %987 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %988 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %989 : bool = prim::Constant[value=0](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %990 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %input.61 : Float(1, 32, 256, 256) = aten::_convolution(%input.60, %1037, %973, %976, %979, %982, %983, %986, %987, %988, %989, %990), scope: UNet/Sequential[decoder1]/Conv2d[decoder1conv2]
  %992 : Long() = prim::Constant[value={1}](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %993 : int = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %994 : Long() = aten::add_(%1032, %992, %993), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %995 : int = prim::Constant[value=0](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %996 : int = aten::size(%input.61, %995), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %size_prods.52 : Long() = prim::NumToTensor(%996), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %998 : int = prim::Constant[value=2](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %999 : int = aten::size(%input.61, %998), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %1000 : Long() = prim::NumToTensor(%999), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %1001 : int = prim::Constant[value=3](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %1002 : int = aten::size(%input.61, %1001), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %1003 : Long() = prim::NumToTensor(%1002), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %size_prods.53 : Long() = aten::mul_(%size_prods.52, %1000), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %size_prods : Long() = aten::mul_(%size_prods.53, %1003), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %1006 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %1007 : float = prim::Constant[value=0.1](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %1008 : float = prim::Constant[value=1e-05](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %1009 : bool = prim::Constant[value=1](), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %input.62 : Float(1, 32, 256, 256) = aten::batch_norm(%input.61, %1036, %1035, %1034, %1033, %1006, %1007, %1008, %1009), scope: UNet/Sequential[decoder1]/BatchNorm2d[decoder1norm2]
  %input : Float(1, 32, 256, 256) = aten::relu_(%input.62), scope: UNet/Sequential[decoder1]/ReLU[decoder1relu2]
  %1012 : int = prim::Constant[value=1](), scope: UNet/Conv2d[conv]
  %1013 : int = prim::Constant[value=1](), scope: UNet/Conv2d[conv]
  %1014 : int[] = prim::ListConstruct(%1012, %1013), scope: UNet/Conv2d[conv]
  %1015 : int = prim::Constant[value=0](), scope: UNet/Conv2d[conv]
  %1016 : int = prim::Constant[value=0](), scope: UNet/Conv2d[conv]
  %1017 : int[] = prim::ListConstruct(%1015, %1016), scope: UNet/Conv2d[conv]
  %1018 : int = prim::Constant[value=1](), scope: UNet/Conv2d[conv]
  %1019 : int = prim::Constant[value=1](), scope: UNet/Conv2d[conv]
  %1020 : int[] = prim::ListConstruct(%1018, %1019), scope: UNet/Conv2d[conv]
  %1021 : bool = prim::Constant[value=0](), scope: UNet/Conv2d[conv]
  %1022 : int = prim::Constant[value=0](), scope: UNet/Conv2d[conv]
  %1023 : int = prim::Constant[value=0](), scope: UNet/Conv2d[conv]
  %1024 : int[] = prim::ListConstruct(%1022, %1023), scope: UNet/Conv2d[conv]
  %1025 : int = prim::Constant[value=1](), scope: UNet/Conv2d[conv]
  %1026 : bool = prim::Constant[value=0](), scope: UNet/Conv2d[conv]
  %1027 : bool = prim::Constant[value=0](), scope: UNet/Conv2d[conv]
  %1028 : bool = prim::Constant[value=1](), scope: UNet/Conv2d[conv]
  %1029 : Float(1, 2, 256, 256) = aten::_convolution(%input, %1031, %1030, %1014, %1017, %1020, %1021, %1024, %1025, %1026, %1027, %1028), scope: UNet/Conv2d[conv]
  return (%1029)

