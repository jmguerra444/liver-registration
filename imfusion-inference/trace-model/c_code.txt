def forward(input_1,
    slot0: Tensor,
    slot1: Tensor,
    slot2: Tensor,
    slot3: Tensor,
    slot4: Tensor,
    slot5: Tensor,
    slot6: Tensor,
    slot7: Tensor,
    slot8: Tensor,
    slot9: Tensor,
    slot10: Tensor,
    slot11: Tensor,
    slot12: Tensor,
    slot13: Tensor,
    slot14: Tensor,
    slot15: Tensor,
    slot16: Tensor,
    slot17: Tensor,
    slot18: Tensor,
    slot19: Tensor,
    slot20: Tensor,
    slot21: Tensor,
    slot22: Tensor,
    slot23: Tensor,
    slot24: Tensor,
    slot25: Tensor,
    slot26: Tensor,
    slot27: Tensor,
    slot28: Tensor,
    slot29: Tensor,
    slot30: Tensor,
    slot31: Tensor,
    slot32: Tensor,
    slot33: Tensor,
    slot34: Tensor,
    slot35: Tensor,
    slot36: Tensor,
    slot37: Tensor,
    slot38: Tensor,
    slot39: Tensor,
    slot40: Tensor,
    slot41: Tensor,
    slot42: Tensor,
    slot43: Tensor,
    slot44: Tensor,
    slot45: Tensor,
    slot46: Tensor,
    slot47: Tensor,
    slot48: Tensor,
    slot49: Tensor,
    slot50: Tensor,
    slot51: Tensor,
    slot52: Tensor,
    slot53: Tensor,
    slot54: Tensor,
    slot55: Tensor,
    slot56: Tensor,
    slot57: Tensor,
    slot58: Tensor,
    slot59: Tensor,
    slot60: Tensor,
    slot61: Tensor,
    slot62: Tensor,
    slot63: Tensor,
    slot64: Tensor,
    slot65: Tensor,
    slot66: Tensor,
    slot67: Tensor,
    slot68: Tensor,
    slot69: Tensor,
    slot70: Tensor,
    slot71: Tensor,
    slot72: Tensor,
    slot73: Tensor,
    slot74: Tensor,
    slot75: Tensor,
    slot76: Tensor,
    slot77: Tensor,
    slot78: Tensor,
    slot79: Tensor,
    slot80: Tensor,
    slot81: Tensor,
    slot82: Tensor) -> Tensor:
  input_2 = torch.replication_pad3d(input_1, [1, 1, 1, 1, 1, 1])
  x_1 = torch._convolution(input_2, slot82, slot81, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  _0 = ops.prim.NumToTensor(torch.size(x_1, 0))
  _1 = int(_0)
  _2 = int(_0)
  self_1 = ops.prim.NumToTensor(torch.size(x_1, 1))
  _3 = int(self_1)
  _4 = ops.prim.NumToTensor(torch.size(x_1, 2))
  _5 = int(_4)
  _6 = ops.prim.NumToTensor(torch.size(x_1, 3))
  _7 = int(_6)
  _8 = ops.prim.NumToTensor(torch.size(x_1, 4))
  _9 = int(_8)
  _10 = int(CONSTANTS.c0)
  _11 = [_2, int(torch.div(self_1, CONSTANTS.c0)), _10, -1]
  xv_1 = torch.view(x_1, _11)
  _12 = torch.sum(torch.pow(xv_1, 2), [2], True)
  _13 = torch.add(torch.pow(_12, 0.5), CONSTANTS.c1, alpha=1)
  xv_2 = torch.div(xv_1, _13)
  input_3 = torch.view(xv_2, [_1, _3, _5, _7, _9])
  x_2 = torch._convolution(input_3, slot80, slot79, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_3 = torch.add_(x_2, input_3, alpha=1)
  _14 = ops.prim.NumToTensor(torch.size(x_3, 0))
  _15 = int(_14)
  _16 = int(_14)
  self_2 = ops.prim.NumToTensor(torch.size(x_3, 1))
  _17 = int(self_2)
  _18 = ops.prim.NumToTensor(torch.size(x_3, 2))
  _19 = int(_18)
  _20 = ops.prim.NumToTensor(torch.size(x_3, 3))
  _21 = int(_20)
  _22 = ops.prim.NumToTensor(torch.size(x_3, 4))
  _23 = int(_22)
  _24 = int(CONSTANTS.c0)
  _25 = [_16, int(torch.div(self_2, CONSTANTS.c0)), _24, -1]
  xv_3 = torch.view(x_3, _25)
  _26 = torch.sum(torch.pow(xv_3, 2), [2], True)
  _27 = torch.add(torch.pow(_26, 0.5), CONSTANTS.c1, alpha=1)
  xv_4 = torch.div(xv_3, _27)
  input_4 = torch.view(xv_4, [_15, _17, _19, _21, _23])
  x_4 = torch._convolution(input_4, slot78, slot77, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_5 = torch.add_(x_4, input_4, alpha=1)
  _28 = ops.prim.NumToTensor(torch.size(x_5, 0))
  _29 = int(_28)
  _30 = int(_28)
  self_3 = ops.prim.NumToTensor(torch.size(x_5, 1))
  _31 = int(self_3)
  _32 = ops.prim.NumToTensor(torch.size(x_5, 2))
  _33 = int(_32)
  _34 = ops.prim.NumToTensor(torch.size(x_5, 3))
  _35 = int(_34)
  _36 = ops.prim.NumToTensor(torch.size(x_5, 4))
  _37 = int(_36)
  _38 = int(CONSTANTS.c0)
  _39 = [_30, int(torch.div(self_3, CONSTANTS.c0)), _38, -1]
  xv_5 = torch.view(x_5, _39)
  _40 = torch.sum(torch.pow(xv_5, 2), [2], True)
  _41 = torch.add(torch.pow(_40, 0.5), CONSTANTS.c1, alpha=1)
  xv_6 = torch.div(xv_5, _41)
  input_5 = torch.view(xv_6, [_29, _31, _33, _35, _37])
  input_6 = torch.replication_pad3d(input_5, [1, 1, 1, 1, 1, 1])
  input_7 = torch._convolution(input_6, slot76, slot75, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_8 = torch.replication_pad3d(input_7, [1, 1, 1, 1, 1, 1])
  input_9 = torch._convolution(input_8, slot74, slot73, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_10 = torch.replication_pad3d(input_9, [1, 1, 1, 1, 1, 1])
  input_11 = torch._convolution(input_10, slot72, slot71, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_12 = torch.replication_pad3d(input_11, [1, 1, 1, 1, 1, 1])
  x_6 = torch._convolution(input_12, slot70, slot69, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_7 = torch.add(x_6, input_7, alpha=1)
  _42 = ops.prim.NumToTensor(torch.size(x_7, 0))
  _43 = int(_42)
  _44 = int(_42)
  self_4 = ops.prim.NumToTensor(torch.size(x_7, 1))
  _45 = int(self_4)
  _46 = ops.prim.NumToTensor(torch.size(x_7, 2))
  _47 = int(_46)
  _48 = ops.prim.NumToTensor(torch.size(x_7, 3))
  _49 = int(_48)
  _50 = ops.prim.NumToTensor(torch.size(x_7, 4))
  _51 = int(_50)
  _52 = int(CONSTANTS.c0)
  _53 = [_44, int(torch.div(self_4, CONSTANTS.c0)), _52, -1]
  xv_7 = torch.view(x_7, _53)
  _54 = torch.sum(torch.pow(xv_7, 2), [2], True)
  _55 = torch.add(torch.pow(_54, 0.5), CONSTANTS.c1, alpha=1)
  xv_8 = torch.div(xv_7, _55)
  input_13 = torch.view(xv_8, [_43, _45, _47, _49, _51])
  input_14 = torch._convolution(input_13, slot68, slot67, [2, 2, 2], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_15 = torch.replication_pad3d(input_14, [1, 1, 1, 1, 1, 1])
  input_16 = torch._convolution(input_15, slot66, slot65, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_17 = torch.replication_pad3d(input_16, [1, 1, 1, 1, 1, 1])
  input_18 = torch._convolution(input_17, slot64, slot63, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_19 = torch.replication_pad3d(input_18, [1, 1, 1, 1, 1, 1])
  x_8 = torch._convolution(input_19, slot62, slot61, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_9 = torch.add(x_8, input_14, alpha=1)
  _56 = ops.prim.NumToTensor(torch.size(x_9, 0))
  _57 = int(_56)
  _58 = int(_56)
  self_5 = ops.prim.NumToTensor(torch.size(x_9, 1))
  _59 = int(self_5)
  _60 = ops.prim.NumToTensor(torch.size(x_9, 2))
  _61 = int(_60)
  _62 = ops.prim.NumToTensor(torch.size(x_9, 3))
  _63 = int(_62)
  _64 = ops.prim.NumToTensor(torch.size(x_9, 4))
  _65 = int(_64)
  _66 = int(CONSTANTS.c0)
  _67 = [_58, int(torch.div(self_5, CONSTANTS.c0)), _66, -1]
  xv_9 = torch.view(x_9, _67)
  _68 = torch.sum(torch.pow(xv_9, 2), [2], True)
  _69 = torch.add(torch.pow(_68, 0.5), CONSTANTS.c1, alpha=1)
  xv_10 = torch.div(xv_9, _69)
  input_20 = torch.view(xv_10, [_57, _59, _61, _63, _65])
  input_21 = torch._convolution(input_20, slot60, slot59, [2, 2, 2], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_22 = torch.replication_pad3d(input_21, [1, 1, 1, 1, 1, 1])
  input_23 = torch._convolution(input_22, slot58, slot57, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_24 = torch.replication_pad3d(input_23, [1, 1, 1, 1, 1, 1])
  input_25 = torch._convolution(input_24, slot56, slot55, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_26 = torch.replication_pad3d(input_25, [1, 1, 1, 1, 1, 1])
  x_10 = torch._convolution(input_26, slot54, slot53, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_11 = torch.add(x_10, input_21, alpha=1)
  _70 = ops.prim.NumToTensor(torch.size(x_11, 0))
  _71 = int(_70)
  _72 = int(_70)
  self_6 = ops.prim.NumToTensor(torch.size(x_11, 1))
  _73 = int(self_6)
  _74 = ops.prim.NumToTensor(torch.size(x_11, 2))
  _75 = int(_74)
  _76 = ops.prim.NumToTensor(torch.size(x_11, 3))
  _77 = int(_76)
  _78 = ops.prim.NumToTensor(torch.size(x_11, 4))
  _79 = int(_78)
  _80 = int(CONSTANTS.c0)
  _81 = [_72, int(torch.div(self_6, CONSTANTS.c0)), _80, -1]
  xv_11 = torch.view(x_11, _81)
  _82 = torch.sum(torch.pow(xv_11, 2), [2], True)
  _83 = torch.add(torch.pow(_82, 0.5), CONSTANTS.c1, alpha=1)
  xv_12 = torch.div(xv_11, _83)
  input_27 = torch.view(xv_12, [_71, _73, _75, _77, _79])
  input_28 = torch._convolution(input_27, slot52, slot51, [2, 2, 2], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_12 = torch._convolution(input_28, slot50, slot49, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_13 = torch.add_(x_12, input_28, alpha=1)
  _84 = ops.prim.NumToTensor(torch.size(x_13, 0))
  _85 = int(_84)
  _86 = int(_84)
  self_7 = ops.prim.NumToTensor(torch.size(x_13, 1))
  _87 = int(self_7)
  _88 = ops.prim.NumToTensor(torch.size(x_13, 2))
  _89 = int(_88)
  _90 = ops.prim.NumToTensor(torch.size(x_13, 3))
  _91 = int(_90)
  _92 = ops.prim.NumToTensor(torch.size(x_13, 4))
  _93 = int(_92)
  _94 = int(CONSTANTS.c0)
  _95 = [_86, int(torch.div(self_7, CONSTANTS.c0)), _94, -1]
  xv_13 = torch.view(x_13, _95)
  _96 = torch.sum(torch.pow(xv_13, 2), [2], True)
  _97 = torch.add(torch.pow(_96, 0.5), CONSTANTS.c1, alpha=1)
  xv_14 = torch.div(xv_13, _97)
  input_29 = torch.view(xv_14, [_85, _87, _89, _91, _93])
  x_14 = torch._convolution(input_29, slot48, slot47, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_15 = torch.add_(x_14, input_29, alpha=1)
  _98 = ops.prim.NumToTensor(torch.size(x_15, 0))
  _99 = int(_98)
  _100 = int(_98)
  self_8 = ops.prim.NumToTensor(torch.size(x_15, 1))
  _101 = int(self_8)
  _102 = ops.prim.NumToTensor(torch.size(x_15, 2))
  _103 = int(_102)
  _104 = ops.prim.NumToTensor(torch.size(x_15, 3))
  _105 = int(_104)
  _106 = ops.prim.NumToTensor(torch.size(x_15, 4))
  _107 = int(_106)
  _108 = int(CONSTANTS.c0)
  _109 = [_100, int(torch.div(self_8, CONSTANTS.c0)), _108, -1]
  xv_15 = torch.view(x_15, _109)
  _110 = torch.sum(torch.pow(xv_15, 2), [2], True)
  _111 = torch.add(torch.pow(_110, 0.5), CONSTANTS.c1, alpha=1)
  xv_16 = torch.div(xv_15, _111)
  input_30 = torch.view(xv_16, [_99, _101, _103, _105, _107])
  input_31 = torch.replication_pad3d(input_30, [1, 1, 1, 1, 1, 1])
  input_32 = torch._convolution(input_31, slot46, slot45, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_33 = torch.replication_pad3d(input_32, [1, 1, 1, 1, 1, 1])
  input_34 = torch._convolution(input_33, slot44, slot43, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_35 = torch.replication_pad3d(input_34, [1, 1, 1, 1, 1, 1])
  x_16 = torch._convolution(input_35, slot42, slot41, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_17 = torch.add(x_16, input_30, alpha=1)
  _112 = ops.prim.NumToTensor(torch.size(x_17, 0))
  _113 = int(_112)
  _114 = int(_112)
  self_9 = ops.prim.NumToTensor(torch.size(x_17, 1))
  _115 = int(self_9)
  _116 = ops.prim.NumToTensor(torch.size(x_17, 2))
  _117 = int(_116)
  _118 = ops.prim.NumToTensor(torch.size(x_17, 3))
  _119 = int(_118)
  _120 = ops.prim.NumToTensor(torch.size(x_17, 4))
  _121 = int(_120)
  _122 = int(CONSTANTS.c0)
  _123 = [_114, int(torch.div(self_9, CONSTANTS.c0)), _122, -1]
  xv_17 = torch.view(x_17, _123)
  _124 = torch.sum(torch.pow(xv_17, 2), [2], True)
  _125 = torch.add(torch.pow(_124, 0.5), CONSTANTS.c1, alpha=1)
  xv_18 = torch.div(xv_17, _125)
  input_36 = torch.view(xv_18, [_113, _115, _117, _119, _121])
  x_18 = torch._convolution(input_36, slot40, slot39, [2, 2, 2], [0, 0, 0], [1, 1, 1], True, [0, 0, 0], 1, False, False, True)
  input_37 = torch.add_(x_18, input_27, alpha=1)
  x_19 = torch._convolution(input_37, slot38, slot37, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_20 = torch.add_(x_19, input_37, alpha=1)
  _126 = ops.prim.NumToTensor(torch.size(x_20, 0))
  _127 = int(_126)
  _128 = int(_126)
  self_10 = ops.prim.NumToTensor(torch.size(x_20, 1))
  _129 = int(self_10)
  _130 = ops.prim.NumToTensor(torch.size(x_20, 2))
  _131 = int(_130)
  _132 = ops.prim.NumToTensor(torch.size(x_20, 3))
  _133 = int(_132)
  _134 = ops.prim.NumToTensor(torch.size(x_20, 4))
  _135 = int(_134)
  _136 = int(CONSTANTS.c0)
  _137 = [_128, int(torch.div(self_10, CONSTANTS.c0)), _136, -1]
  xv_19 = torch.view(x_20, _137)
  _138 = torch.sum(torch.pow(xv_19, 2), [2], True)
  _139 = torch.add(torch.pow(_138, 0.5), CONSTANTS.c1, alpha=1)
  xv_20 = torch.div(xv_19, _139)
  input_38 = torch.view(xv_20, [_127, _129, _131, _133, _135])
  x_21 = torch._convolution(input_38, slot36, slot35, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_22 = torch.add_(x_21, input_38, alpha=1)
  _140 = ops.prim.NumToTensor(torch.size(x_22, 0))
  _141 = int(_140)
  _142 = int(_140)
  self_11 = ops.prim.NumToTensor(torch.size(x_22, 1))
  _143 = int(self_11)
  _144 = ops.prim.NumToTensor(torch.size(x_22, 2))
  _145 = int(_144)
  _146 = ops.prim.NumToTensor(torch.size(x_22, 3))
  _147 = int(_146)
  _148 = ops.prim.NumToTensor(torch.size(x_22, 4))
  _149 = int(_148)
  _150 = int(CONSTANTS.c0)
  _151 = [_142, int(torch.div(self_11, CONSTANTS.c0)), _150, -1]
  xv_21 = torch.view(x_22, _151)
  _152 = torch.sum(torch.pow(xv_21, 2), [2], True)
  _153 = torch.add(torch.pow(_152, 0.5), CONSTANTS.c1, alpha=1)
  xv_22 = torch.div(xv_21, _153)
  input_39 = torch.view(xv_22, [_141, _143, _145, _147, _149])
  input_40 = torch.replication_pad3d(input_39, [1, 1, 1, 1, 1, 1])
  input_41 = torch._convolution(input_40, slot34, slot33, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_42 = torch.replication_pad3d(input_41, [1, 1, 1, 1, 1, 1])
  input_43 = torch._convolution(input_42, slot32, slot31, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_44 = torch.replication_pad3d(input_43, [1, 1, 1, 1, 1, 1])
  x_23 = torch._convolution(input_44, slot30, slot29, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_24 = torch.add(x_23, input_39, alpha=1)
  _154 = ops.prim.NumToTensor(torch.size(x_24, 0))
  _155 = int(_154)
  _156 = int(_154)
  self_12 = ops.prim.NumToTensor(torch.size(x_24, 1))
  _157 = int(self_12)
  _158 = ops.prim.NumToTensor(torch.size(x_24, 2))
  _159 = int(_158)
  _160 = ops.prim.NumToTensor(torch.size(x_24, 3))
  _161 = int(_160)
  _162 = ops.prim.NumToTensor(torch.size(x_24, 4))
  _163 = int(_162)
  _164 = int(CONSTANTS.c0)
  _165 = [_156, int(torch.div(self_12, CONSTANTS.c0)), _164, -1]
  xv_23 = torch.view(x_24, _165)
  _166 = torch.sum(torch.pow(xv_23, 2), [2], True)
  _167 = torch.add(torch.pow(_166, 0.5), CONSTANTS.c1, alpha=1)
  xv_24 = torch.div(xv_23, _167)
  input_45 = torch.view(xv_24, [_155, _157, _159, _161, _163])
  x_25 = torch._convolution(input_45, slot28, slot27, [2, 2, 2], [0, 0, 0], [1, 1, 1], True, [0, 0, 0], 1, False, False, True)
  input_46 = torch.add_(x_25, input_20, alpha=1)
  x_26 = torch._convolution(input_46, slot26, slot25, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_27 = torch.add_(x_26, input_46, alpha=1)
  _168 = ops.prim.NumToTensor(torch.size(x_27, 0))
  _169 = int(_168)
  _170 = int(_168)
  self_13 = ops.prim.NumToTensor(torch.size(x_27, 1))
  _171 = int(self_13)
  _172 = ops.prim.NumToTensor(torch.size(x_27, 2))
  _173 = int(_172)
  _174 = ops.prim.NumToTensor(torch.size(x_27, 3))
  _175 = int(_174)
  _176 = ops.prim.NumToTensor(torch.size(x_27, 4))
  _177 = int(_176)
  _178 = int(CONSTANTS.c0)
  _179 = [_170, int(torch.div(self_13, CONSTANTS.c0)), _178, -1]
  xv_25 = torch.view(x_27, _179)
  _180 = torch.sum(torch.pow(xv_25, 2), [2], True)
  _181 = torch.add(torch.pow(_180, 0.5), CONSTANTS.c1, alpha=1)
  xv_26 = torch.div(xv_25, _181)
  input_47 = torch.view(xv_26, [_169, _171, _173, _175, _177])
  x_28 = torch._convolution(input_47, slot24, slot23, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_29 = torch.add_(x_28, input_47, alpha=1)
  _182 = ops.prim.NumToTensor(torch.size(x_29, 0))
  _183 = int(_182)
  _184 = int(_182)
  self_14 = ops.prim.NumToTensor(torch.size(x_29, 1))
  _185 = int(self_14)
  _186 = ops.prim.NumToTensor(torch.size(x_29, 2))
  _187 = int(_186)
  _188 = ops.prim.NumToTensor(torch.size(x_29, 3))
  _189 = int(_188)
  _190 = ops.prim.NumToTensor(torch.size(x_29, 4))
  _191 = int(_190)
  _192 = int(CONSTANTS.c0)
  _193 = [_184, int(torch.div(self_14, CONSTANTS.c0)), _192, -1]
  xv_27 = torch.view(x_29, _193)
  _194 = torch.sum(torch.pow(xv_27, 2), [2], True)
  _195 = torch.add(torch.pow(_194, 0.5), CONSTANTS.c1, alpha=1)
  xv_28 = torch.div(xv_27, _195)
  input_48 = torch.view(xv_28, [_183, _185, _187, _189, _191])
  input_49 = torch.replication_pad3d(input_48, [1, 1, 1, 1, 1, 1])
  input_50 = torch._convolution(input_49, slot22, slot21, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_51 = torch.replication_pad3d(input_50, [1, 1, 1, 1, 1, 1])
  input_52 = torch._convolution(input_51, slot20, slot19, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_53 = torch.replication_pad3d(input_52, [1, 1, 1, 1, 1, 1])
  x_30 = torch._convolution(input_53, slot18, slot17, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_31 = torch.add(x_30, input_48, alpha=1)
  _196 = ops.prim.NumToTensor(torch.size(x_31, 0))
  _197 = int(_196)
  _198 = int(_196)
  self_15 = ops.prim.NumToTensor(torch.size(x_31, 1))
  _199 = int(self_15)
  _200 = ops.prim.NumToTensor(torch.size(x_31, 2))
  _201 = int(_200)
  _202 = ops.prim.NumToTensor(torch.size(x_31, 3))
  _203 = int(_202)
  _204 = ops.prim.NumToTensor(torch.size(x_31, 4))
  _205 = int(_204)
  _206 = int(CONSTANTS.c0)
  _207 = [_198, int(torch.div(self_15, CONSTANTS.c0)), _206, -1]
  xv_29 = torch.view(x_31, _207)
  _208 = torch.sum(torch.pow(xv_29, 2), [2], True)
  _209 = torch.add(torch.pow(_208, 0.5), CONSTANTS.c1, alpha=1)
  xv_30 = torch.div(xv_29, _209)
  input_54 = torch.view(xv_30, [_197, _199, _201, _203, _205])
  x_32 = torch._convolution(input_54, slot16, slot15, [2, 2, 2], [0, 0, 0], [1, 1, 1], True, [0, 0, 0], 1, False, False, True)
  input_55 = torch.add_(x_32, input_13, alpha=1)
  x_33 = torch._convolution(input_55, slot14, slot13, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_34 = torch.add_(x_33, input_55, alpha=1)
  _210 = ops.prim.NumToTensor(torch.size(x_34, 0))
  _211 = int(_210)
  _212 = int(_210)
  self_16 = ops.prim.NumToTensor(torch.size(x_34, 1))
  _213 = int(self_16)
  _214 = ops.prim.NumToTensor(torch.size(x_34, 2))
  _215 = int(_214)
  _216 = ops.prim.NumToTensor(torch.size(x_34, 3))
  _217 = int(_216)
  _218 = ops.prim.NumToTensor(torch.size(x_34, 4))
  _219 = int(_218)
  _220 = int(CONSTANTS.c0)
  _221 = [_212, int(torch.div(self_16, CONSTANTS.c0)), _220, -1]
  xv_31 = torch.view(x_34, _221)
  _222 = torch.sum(torch.pow(xv_31, 2), [2], True)
  _223 = torch.add(torch.pow(_222, 0.5), CONSTANTS.c1, alpha=1)
  xv_32 = torch.div(xv_31, _223)
  input_56 = torch.view(xv_32, [_211, _213, _215, _217, _219])
  x_35 = torch._convolution(input_56, slot12, slot11, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_36 = torch.add_(x_35, input_56, alpha=1)
  _224 = ops.prim.NumToTensor(torch.size(x_36, 0))
  _225 = int(_224)
  _226 = int(_224)
  self_17 = ops.prim.NumToTensor(torch.size(x_36, 1))
  _227 = int(self_17)
  _228 = ops.prim.NumToTensor(torch.size(x_36, 2))
  _229 = int(_228)
  _230 = ops.prim.NumToTensor(torch.size(x_36, 3))
  _231 = int(_230)
  _232 = ops.prim.NumToTensor(torch.size(x_36, 4))
  _233 = int(_232)
  _234 = int(CONSTANTS.c0)
  _235 = [_226, int(torch.div(self_17, CONSTANTS.c0)), _234, -1]
  xv_33 = torch.view(x_36, _235)
  _236 = torch.sum(torch.pow(xv_33, 2), [2], True)
  _237 = torch.add(torch.pow(_236, 0.5), CONSTANTS.c1, alpha=1)
  xv_34 = torch.div(xv_33, _237)
  input_57 = torch.view(xv_34, [_225, _227, _229, _231, _233])
  input_58 = torch.replication_pad3d(input_57, [1, 1, 1, 1, 1, 1])
  input_59 = torch._convolution(input_58, slot10, slot9, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_60 = torch.replication_pad3d(input_59, [1, 1, 1, 1, 1, 1])
  input_61 = torch._convolution(input_60, slot8, slot7, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  input_62 = torch.replication_pad3d(input_61, [1, 1, 1, 1, 1, 1])
  x_37 = torch._convolution(input_62, slot6, slot5, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_38 = torch.add(x_37, input_57, alpha=1)
  _238 = ops.prim.NumToTensor(torch.size(x_38, 0))
  _239 = int(_238)
  _240 = int(_238)
  self_18 = ops.prim.NumToTensor(torch.size(x_38, 1))
  _241 = int(self_18)
  _242 = ops.prim.NumToTensor(torch.size(x_38, 2))
  _243 = int(_242)
  _244 = ops.prim.NumToTensor(torch.size(x_38, 3))
  _245 = int(_244)
  _246 = ops.prim.NumToTensor(torch.size(x_38, 4))
  _247 = int(_246)
  _248 = int(CONSTANTS.c0)
  _249 = [_240, int(torch.div(self_18, CONSTANTS.c0)), _248, -1]
  xv_35 = torch.view(x_38, _249)
  _250 = torch.sum(torch.pow(xv_35, 2), [2], True)
  _251 = torch.add(torch.pow(_250, 0.5), CONSTANTS.c1, alpha=1)
  xv_36 = torch.div(xv_35, _251)
  input_63 = torch.view(xv_36, [_239, _241, _243, _245, _247])
  x_39 = torch._convolution(input_63, slot4, slot3, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x_40 = torch.add_(x_39, input_63, alpha=1)
  _252 = ops.prim.NumToTensor(torch.size(x_40, 0))
  _253 = int(_252)
  _254 = int(_252)
  self_19 = ops.prim.NumToTensor(torch.size(x_40, 1))
  _255 = int(self_19)
  _256 = ops.prim.NumToTensor(torch.size(x_40, 2))
  _257 = int(_256)
  _258 = ops.prim.NumToTensor(torch.size(x_40, 3))
  _259 = int(_258)
  _260 = ops.prim.NumToTensor(torch.size(x_40, 4))
  _261 = int(_260)
  _262 = int(CONSTANTS.c0)
  _263 = [_254, int(torch.div(self_19, CONSTANTS.c0)), _262, -1]
  xv_37 = torch.view(x_40, _263)
  _264 = torch.sum(torch.pow(xv_37, 2), [2], True)
  _265 = torch.add(torch.pow(_264, 0.5), CONSTANTS.c1, alpha=1)
  xv_38 = torch.div(xv_37, _265)
  input_64 = torch.view(xv_38, [_253, _255, _257, _259, _261])
  x_41 = torch._convolution(input_64, slot2, slot1, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  x = torch.add_(x_41, input_64, alpha=1)
  _266 = ops.prim.NumToTensor(torch.size(x, 0))
  _267 = int(_266)
  _268 = int(_266)
  self_20 = ops.prim.NumToTensor(torch.size(x, 1))
  _269 = int(self_20)
  _270 = ops.prim.NumToTensor(torch.size(x, 2))
  _271 = int(_270)
  _272 = ops.prim.NumToTensor(torch.size(x, 3))
  _273 = int(_272)
  _274 = ops.prim.NumToTensor(torch.size(x, 4))
  _275 = int(_274)
  _276 = int(CONSTANTS.c0)
  _277 = [_268, int(torch.div(self_20, CONSTANTS.c0)), _276, -1]
  xv_39 = torch.view(x, _277)
  _278 = torch.sum(torch.pow(xv_39, 2), [2], True)
  _279 = torch.add(torch.pow(_278, 0.5), CONSTANTS.c1, alpha=1)
  xv = torch.div(xv_39, _279)
  input_65 = torch.view(xv, [_267, _269, _271, _273, _275])
  input = torch.replication_pad3d(input_65, [1, 1, 1, 1, 1, 1])
  _280 = torch._convolution(input, slot0, None, [1, 1, 1], [0, 0, 0], [1, 1, 1], False, [0, 0, 0], 1, False, False, True)
  return _280

